// Service ƒë·ªÉ gi·ªØ backend lu√¥n ho·∫°t ƒë·ªông b·∫±ng c√°ch ping ƒë·ªãnh k·ª≥
class KeepAliveService {
  constructor() {
    this.backendUrl = import.meta.env.VITE_API_BASE_URL || 'https://backend-websitebandocongnghe-4rkw.onrender.com';
    this.pingInterval = 14 * 60 * 1000; // 14 ph√∫t (tr∆∞·ªõc khi Render t·∫Øt server sau 15 ph√∫t)
    this.healthEndpoint = '/api/health'; // endpoint health check
    this.intervalId = null;
    this.isActive = false;
    this.retryCount = 0;
    this.maxRetries = 3;
  }

  // B·∫Øt ƒë·∫ßu ping backend
  start() {
    if (this.isActive) {
      console.log('Keep-alive service already running');
      return;
    }

    this.isActive = true;
    console.log('üöÄ Starting backend keep-alive service...');
    
    // Ping ngay l·∫≠p t·ª©c
    this.pingBackend();
    
    // Thi·∫øt l·∫≠p ping ƒë·ªãnh k·ª≥
    this.intervalId = setInterval(() => {
      this.pingBackend();
    }, this.pingInterval);
  }

  // D·ª´ng ping backend
  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    this.isActive = false;
    console.log('üõë Backend keep-alive service stopped');
  }

  // Ping backend ƒë·ªÉ gi·ªØ server ho·∫°t ƒë·ªông
  async pingBackend() {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout

      console.log('üèì Pinging backend to keep alive...');
      
      const response = await fetch(`${this.backendUrl}${this.healthEndpoint}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (response.ok) {
        console.log('‚úÖ Backend ping successful');
        this.retryCount = 0; // Reset retry count on success
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Backend ping failed:', error.message);
      
      // Retry logic
      if (this.retryCount < this.maxRetries) {
        this.retryCount++;
        console.log(`üîÑ Retrying... (${this.retryCount}/${this.maxRetries})`);
        
        // Retry sau 30 gi√¢y
        setTimeout(() => {
          this.pingBackend();
        }, 30000);
      } else {
        console.error('‚ùå Max retries reached. Backend might be down.');
        this.retryCount = 0; // Reset for next interval
      }
    }
  }

  // Ki·ªÉm tra tr·∫°ng th√°i
  getStatus() {
    return {
      isActive: this.isActive,
      pingInterval: this.pingInterval,
      backendUrl: this.backendUrl,
      retryCount: this.retryCount
    };
  }

  // C·∫≠p nh·∫≠t c·∫•u h√¨nh
  updateConfig(config) {
    if (config.backendUrl) {
      this.backendUrl = config.backendUrl;
    }
    if (config.pingInterval) {
      this.pingInterval = config.pingInterval;
      // Restart n·∫øu ƒëang ch·∫°y
      if (this.isActive) {
        this.stop();
        this.start();
      }
    }
    if (config.healthEndpoint) {
      this.healthEndpoint = config.healthEndpoint;
    }
  }
}

// T·∫°o instance duy nh·∫•t
const keepAliveService = new KeepAliveService();

// Export ƒë·ªÉ s·ª≠ d·ª•ng trong app
export default keepAliveService;
