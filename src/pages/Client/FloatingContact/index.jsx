// Gi·ªëng b·∫£n chu·∫©n ƒë√£ d√πng tr∆∞·ªõc
import React, { useState, useRef, useEffect } from 'react';
import './FloatingContact.css';
import logo from '@/assets/Client/images/Logo/logo.svg';
import resetIcon from '@/assets/Client/images/Logo/reset-reload.svg';
import { chatService } from '@/services/client/chatService';

const quickSuggestions = [
  'T√¥i mu·ªën t√¨m qu·∫°t ƒëi·ªÅu ho√† cho ph√≤ng 30m¬≤',
  'C√≥ s·∫£n ph·∫©m n√†o ƒëang gi·∫£m gi√° kh√¥ng?',
  'T·ªß l·∫°nh n√†o ph√π h·ª£p gia ƒë√¨nh 4 ng∆∞·ªùi?',
  'Th∆∞∆°ng hi·ªáu Sunhouse c√≥ g√¨ n·ªïi b·∫≠t?',
  'T√¥i c√≥ th·ªÉ mua online kh√¥ng?',
  'Cho t√¥i bi·∫øt c√°ch li√™n h·ªá c·ª≠a h√†ng',
  'Web c·ªßa b·∫°n c√≥ uy t√≠n kh√¥ng?',
  'T√¥i mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ m√°y l·ªçc n∆∞·ªõc',
];

export default function FloatingContactBox() {
  const [open, setOpen] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const chatEndRef = useRef(null);
  const inputRef = useRef(null);

  const systemGreeting = {
    role: 'system',
    text: 'üëã Xin ch√†o! Em l√† tr·ª£ l√Ω ·∫£o c·ªßa Home Power. Anh/Ch·ªã c·∫ßn em h·ªó tr·ª£ g√¨ ·∫°?',
  };

  useEffect(() => {
    if (open && chatHistory.length === 0) {
      setChatHistory([systemGreeting]);
    }
  }, [open]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatHistory, isLoading]);

  const resetChat = () => {
    setChatHistory([systemGreeting]);
    setMessage('');
    setShowSuggestions(true);
    inputRef.current?.focus();
  };

  const sendMessage = async (msg = message) => {
    const trimmed = msg.trim();
    if (!trimmed) return;
    if (showSuggestions) setShowSuggestions(false);
    setChatHistory((prev) => [...prev, { role: 'user', text: trimmed }]);
    setMessage('');
    setIsLoading(true);
    try {
      const res = await chatService.sendMessage({ message: trimmed });
      const reply =
        res?.data?.data?.reply ||
        'ü§ñ Xin l·ªói, em ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi. Anh/Ch·ªã vui l√≤ng th·ª≠ l·∫°i.';
      setChatHistory((prev) => [...prev, { role: 'ai', text: reply }]);
    } catch (err) {
      console.error('[ChatBox Error]', err);
      setChatHistory((prev) => [
        ...prev,
        {
          role: 'ai',
          text: '‚ùå ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.',
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  // üëá B·∫Øt ƒë·∫ßu JSX hi·ªÉn th·ªã
  return (
    <>
      <div className="floating-contact">
        {/* 3 n√∫t + tr·ª£ l√Ω ·∫£o */}
        <a href="https://m.me/tenfanpagecuaban" className="contact-item">
          <img src="https://cdn-icons-png.flaticon.com/512/2111/2111463.png" alt="Messenger" />
          <div className="contact-text">
            <span>Chat Messenger</span>
            <small>(8h - 24h)</small>
          </div>
        </a>
        <a href="tel:19008922" className="contact-item">
          <img src="/icons/btn-call.svg" alt="G·ªçi mua h√†ng" />
          <div className="contact-text">
            <span>G·ªçi mua h√†ng</span>
            <small>1900 8922</small>
          </div>
        </a>
        <a href="tel:19008174" className="contact-item">
          <img src="/icons/icon-repair.svg" alt="B·∫£o h√†nh" />
          <div className="contact-text">
            <span>G·ªçi b·∫£o h√†nh</span>
            <small>1900 8174</small>
          </div>
        </a>
        <button onClick={() => setOpen(true)} className="contact-item">
          <img src={logo} alt="Tr·ª£ l√Ω ·∫£o" />
          <div className="contact-text">
            <span>Tr·ª£ l√Ω ·∫£o</span>
            <small>H·ªèi ƒë√°p 24/7</small>
          </div>
        </button>
      </div>

      {open && (
        <div className="chatbox-container">
          <div className="chatbox-header">
            <div className="header-content">
              <img src={logo} alt="bot" className="header-logo" />
              <span className="header-title">Home Power</span>
            </div>
            <div className="header-actions">
              <button onClick={resetChat} className="header-button" title="Reset">
                <img src={resetIcon} alt="reset" className="action-icon" />
              </button>
              <button onClick={() => setOpen(false)} className="header-button" title="ƒê√≥ng">
                <svg viewBox="0 0 24 24" className="action-icon">
                  <path d="M6 18L18 6M6 6l12 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                </svg>
              </button>
            </div>
          </div>

          <div className="chat-content">
            {chatHistory.map((msg, i) => (
              <div
                key={i}
                className={`chat-message ${msg.role === 'user' ? 'user-message' : 'ai-message'}`}
                dangerouslySetInnerHTML={{ __html: msg.text }}
              />
            ))}
            {isLoading && (
              <div className="chat-message ai-message">
                <span className="loading-text">Tr·ª£ l√Ω ƒëang tr·∫£ l·ªùi...</span>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>

          <div className="chat-input-area">
            {chatHistory.length > 1 && (
              <div className="suggestions-toggle">
                <button onClick={() => setShowSuggestions(!showSuggestions)}>
                  {showSuggestions ? '·∫®n g·ª£i √Ω nhanh ‚ñ≤' : 'Hi·ªán g·ª£i √Ω nhanh ‚ñº'}
                </button>
              </div>
            )}
            {showSuggestions && (
              <div className="quick-suggestions">
                {quickSuggestions.map((sug, idx) => (
                  <button key={idx} onClick={() => sendMessage(sug)} className="suggestion-button">
                    {sug}
                  </button>
                ))}
              </div>
            )}
            <div className="message-input-container">
              <input
                ref={inputRef}
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && !isLoading && sendMessage()}
                disabled={isLoading}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                className="message-input"
              />
              <button
                onClick={() => sendMessage()}
                disabled={isLoading || !message.trim()}
                className="send-button"
              >
                <svg className="send-icon" viewBox="0 0 24 24">
                  <path d="M2 21l21-9L2 3v7l15 2-15 2v7z" fill="currentColor" />
                </svg>
              </button>
            </div>
            <p className="disclaimer-text">Tr·ª£ l√Ω AI h·ªó tr·ª£ 24/7 - N·ªôi dung mang t√≠nh tham kh·∫£o</p>
          </div>
        </div>
      )}
    </>
  );
}
