import { useState } from "react";
// import "./index.css";
import ProductList from "./ProductList";
import FeatureSlider from "./FeatureSlider";
export default function ProductDetail() {
  const [selectedColor, setSelectedColor] = useState("Titan Sa M·∫°c");
  const [selectedOption, setSelectedOption] = useState("WIFI 12GB 256GB");
  const [showSpecModal, setShowSpecModal] = useState(false);

  const [mainImage, setMainImage] = useState(
    "https://cdn2.cellphones.com.vn/insecure/rs:fill:400:400/q:90/plain/https://cellphones.com.vn/media/catalog/product/i/p/iphone-16-pro-max-3_1.png"
  );
  const [showAll, setShowAll] = useState(false);

  const questions = [
    {
      user: "Nguyen Lam",
      time: "6 ng√†y tr∆∞·ªõc",
      question: "n·∫øu kh√¥ng l·∫•y bao da th√¨ c√≥ ƒë∆∞·ª£c gi·∫£m gi√° th√™m kh√¥ng ·∫°?",
      adminReply:
        "CellphoneS xin ch√†o anh Lam. D·∫° hi·ªán t·∫°i ∆∞u ƒë√£i t·∫∑ng k√®m bao da b√†n ph√≠m ch·ªâ √°p d·ª•ng cho h·ªçc sinh sinh vi√™n v√† s·∫£n ph·∫©m qu√† t·∫∑ng ch∆∞a h·ªó tr·ª£ quy ƒë·ªïi.",
    },
    {
      user: "ƒê·∫∑ng VƒÉn Vi·ªát",
      time: "1 tu·∫ßn tr∆∞·ªõc",
      question:
        "Tr∆∞·ªùng h·ª£p m√°y hao pin khi m·ªõi mua th√¨ c√≥ ƒë∆∞·ª£c ƒë·ªïi m√°y m·ªõi l·∫°i kh√¥ng shop",
      adminReply:
        "CellphoneS xin ch√†o anh Vi·ªát, d·∫° em xin g·ª≠i l·∫°i th√¥ng tin ƒë·∫øn b·ªô ph·∫≠n li√™n quan ki·ªÉm tra v√† s·∫Ω li√™n h·ªá l·∫°i anh trong v√≤ng 60 ph√∫t.",
    },
    {
      user: "Tu·∫•n Ph·∫°m",
      time: "2 tu·∫ßn tr∆∞·ªõc",
      question:
        "ph·ª• ki·ªán ƒëi k√®m g·ªìm nh·ªØng g√¨ v·∫≠y shop. C√≥ bao g·ªìm b√∫t v√† bao da kh√¥ng ·∫°",
      adminReply: "",
    },
    // Th√™m nhi·ªÅu b√¨nh lu·∫≠n kh√°c n·∫øu mu·ªën
  ];
  const visibleQuestions = showAll ? questions : questions.slice(0, 2);

  return (
    <div className="max-w-screen-xl mx-auto px-4 py-6 text-sm text-gray-800">
      <h1 className="text-lg md:text-xl font-bold mb-2">
        iPad Samsung Tab S9 WiFi 12GB 256GB | Ch√≠nh h√£ng
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-[2fr_1fr] gap-6 items-start">
        {/* LEFT */}
        <div className="space-y-6">
          <div className="w-full aspect-[4/2] border rounded overflow-hidden">
            <img
              src={mainImage}
              alt=""
              className="w-full h-full object-contain"
            />
          </div>
          <FeatureSlider onSelect={(img) => setMainImage(img)} />
        </div>

        {/* RIGHT */}
        <div className="bg-white p-4 rounded border shadow-sm space-y-4 text-sm text-gray-800 sticky top-4 h-fit">
          {/* Option */}
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
            {[
              { label: "5G 12GB 256GB", price: "19.990.000‚Ç´" },
              { label: "5G 8GB 128GB", price: "18.590.000‚Ç´" },
              { label: "WIFI 12GB 256GB", price: "15.490.000‚Ç´" },
              { label: "WIFI 8GB 128GB", price: "14.990.000‚Ç´" },
            ].map((opt, i) => (
              <button
                key={i}
                onClick={() => setSelectedOption(opt.label)}
                className={`border rounded p-2 text-center text-xs ${
                  selectedOption === opt.label
                    ? "border-red-500 bg-red-50"
                    : "hover:border-red-400"
                }`}
              >
                <div className="font-medium">{opt.label}</div>
                <div className="text-red-600 font-semibold">{opt.price}</div>
              </button>
            ))}
          </div>

          {/* Color */}
          <div>
            <p className="font-medium mb-1">
              Ch·ªçn m√†u ƒë·ªÉ xem gi√° v√† chi nh√°nh c√≥ h√†ng
            </p>
            <div className="flex gap-2">
              {["Kem", "X√°m"].map((color) => {
                const bgColor =
                  color === "Kem" ? "bg-yellow-100" : "bg-gray-500";
                return (
                  <button
                    key={color}
                    onClick={() => setSelectedColor(color)}
                    className={`border rounded flex items-center gap-2 px-3 py-2 text-xs ${
                      selectedColor === color
                        ? "border-red-500 bg-red-50"
                        : "hover:border-red-400"
                    }`}
                  >
                    <div className={`w-4 h-4 rounded-full ${bgColor}`}></div>
                    <span>{color}</span>
                  </button>
                );
              })}
            </div>
          </div>

          {/* Price Summary */}
          <div className="border rounded p-3 flex justify-between items-center">
            <div className="text-sm text-gray-700">
              <p>
                üîÅ <span className="font-semibold">14.990.000‚Ç´</span>
              </p>
              <p className="text-xs text-gray-500">Khi thu c≈© l√™n ƒë·ªùi</p>
            </div>
            <div className="text-right">
              <p className="text-red-600 font-bold text-lg">15.490.000‚Ç´</p>
              <p className="text-xs line-through text-gray-400">21.990.000‚Ç´</p>
            </div>
          </div>

          {/* Buy Now */}
          <button className="w-full bg-red-600 text-white py-2 rounded font-semibold hover:bg-red-700 text-sm">
            MUA NGAY
          </button>
        </div>
      </div>

      {/* S·∫¢N PH·∫®M T∆Ø∆†NG T·ª∞ */}
      <div className="mt-10">
        <h2 className="text-xl font-bold mb-4 text-gray-800">
          S·∫£n ph·∫©m t∆∞∆°ng t·ª±
        </h2>
        <ProductList />
      </div>

      {/* ƒê√ÅNH GI√Å & TH√îNG S·ªê K·ª∏ THU·∫¨T - C√πng h√†ng */}
      <div className="mt-10 grid grid-cols-1 md:grid-cols-[2fr_1fr] gap-6">
        {/* ƒê√°nh gi√° & nh·∫≠n x√©t */}
        <div className="bg-white p-6 rounded border shadow-sm text-sm !pb-2">
          <h2 className="text-base font-bold mb-4">
            ƒê√°nh gi√° & nh·∫≠n x√©t iPhone 16 Pro Max 1TB
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="flex flex-col items-center md:border-r md:pr-6">
              <span className="text-2xl font-bold">4.5/5</span>
              <div className="text-yellow-400 flex text-lg mb-1">
                ‚òÖ‚òÖ‚òÖ‚òÖ<span className="text-gray-300">‚òÜ</span>
              </div>
              <span className="text-blue-600 underline cursor-pointer">
                2 ƒë√°nh gi√°
              </span>
            </div>
            <div className="md:col-span-2 space-y-1">
              {[5, 4, 3, 2, 1].map((star) => (
                <div key={star} className="flex items-center gap-2">
                  <span className="w-6">{star} ‚òÖ</span>
                  <div className="flex-1 bg-gray-200 rounded h-2 overflow-hidden">
                    <div
                      className="h-full bg-red-500"
                      style={{ width: star === 5 || star === 4 ? "50%" : "0%" }}
                    />
                  </div>
                  <span className="text-xs text-gray-500">
                    {star <= 4 ? "1 ƒë√°nh gi√°" : "0 ƒë√°nh gi√°"}
                  </span>
                </div>
              ))}
            </div>
          </div>

          {/* Theo tr·∫£i nghi·ªám */}
          <div className="border-t mt-4 pt-4 space-y-2">
            <h3 className="font-semibold">ƒê√°nh gi√° theo tr·∫£i nghi·ªám</h3>
            {["Hi·ªáu nƒÉng", "Th·ªùi l∆∞·ª£ng pin", "M√†n h√¨nh"].map((text, i) => (
              <div key={i} className="flex justify-between items-center">
                <span>{text}</span>
                <div className="text-yellow-400 text-sm">
                  ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ <span className="text-black ml-1">(2)</span>
                </div>
              </div>
            ))}
          </div>

          {/* G·ª£i √Ω ƒë√°nh gi√° */}
          <div className="text-center mt-6">
            <p>B·∫°n ƒë√°nh gi√° sao v·ªÅ s·∫£n ph·∫©m n√†y?</p>
            <button className="mt-2 bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
              ƒê√°nh gi√° ngay
            </button>
          </div>

          {/* L·ªçc */}
          <div className="mt-6">
            <h4 className="font-semibold mb-2">L·ªçc theo</h4>
            <div className="flex flex-wrap gap-2 mb-3">
              <span className="px-3 py-1 border rounded-full bg-red-100 text-red-600">
                T·∫•t c·∫£
              </span>
              <span className="px-3 py-1 border rounded-full">C√≥ h√¨nh ·∫£nh</span>
              <span className="px-3 py-1 border rounded-full">ƒê√£ mua h√†ng</span>
            </div>
            <div className="flex flex-wrap gap-2">
              {[5, 4, 3, 2, 1].map((star) => (
                <span
                  key={star}
                  className="px-2 py-1 border rounded-full text-sm"
                >
                  {star} ‚òÖ
                </span>
              ))}
            </div>
          </div>

          {/* Danh s√°ch ƒë√°nh gi√° */}
          <div className="mt-6 space-y-4">
            {[
              {
                name: "Th√¢n Qu·ªëc Th·ªãnh",
                date: "6/5/2025 13:49",
                rating: 5,
                tags: [
                  "Hi·ªáu nƒÉng M·∫°nh m·∫Ω",
                  "Th·ªùi l∆∞·ª£ng pin Kh·ªßng",
                  "M√†n h√¨nh R·∫•t s·∫Øc n√©t",
                ],
                content: "S·∫£n ph·∫©m r·∫•t t·ªët, m∆∞·ª£t",
              },
              {
                name: "Nguy·ªÖn Kh√°nh",
                date: "24/4/2025 16:19",
                rating: 4,
                tags: [
                  "Hi·ªáu nƒÉng M·∫°nh m·∫Ω",
                  "Th·ªùi l∆∞·ª£ng pin Kh·ªßng",
                  "M√†n h√¨nh R·∫•t s·∫Øc n√©t",
                ],
                content: "S·∫£n ph·∫©m t·ªët nh∆∞ng ch∆∞a t·ªëi ∆∞u",
              },
            ].map((review, idx) => (
              <div key={idx} className="border-t pt-4">
                <div className="flex items-center gap-2 mb-1">
                  <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-white font-bold">
                    {review.name[0]}
                  </div>
                  <div>
                    <p className="font-semibold">{review.name}</p>
                    <p className="text-xs text-gray-500">{review.date}</p>
                  </div>
                </div>
                <div className="text-yellow-400 mb-2">
                  {"‚òÖ".repeat(review.rating)}
                  {"‚òÜ".repeat(5 - review.rating)}
                </div>
                <div className="flex flex-wrap gap-2 text-xs mb-2">
                  {review.tags.map((tag, i) => (
                    <span
                      key={i}
                      className="bg-gray-100 border px-2 py-1 rounded"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
                <p className="text-gray-700">{review.content}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Th√¥ng s·ªë k·ªπ thu·∫≠t */}
        <div className="bg-white p-4 rounded border shadow-md text-sm md:sticky md:top-4 md:self-start">
          <h2 className="font-semibold text-base mb-3">Th√¥ng s·ªë k·ªπ thu·∫≠t</h2>
          <table className="w-full text-sm">
            <tbody>
              {[
                ["M√†n h√¨nh", "6.9‚Äù Super Retina XDR"],
                ["Camera", "48MP + Tele + Ultra"],
                ["Camera tr∆∞·ªõc", "12MP f/1.9"],
                ["Chipset", "Apple A18 Pro"],
                ["RAM", "12GB"],
                ["B·ªô nh·ªõ", "1TB"],
                ["SIM", "nano + eSIM"],
                ["OS", "iOS 18"],
                ["T√≠nh nƒÉng", "120Hz, HDR, Dynamic Island"],
              ].map(([label, value], i) => (
                <tr key={i} className="align-top">
                  <td className="py-1 pr-2 text-gray-600 font-medium whitespace-nowrap">
                    {label}:
                  </td>
                  <td className="py-1 text-gray-800">{value}</td>
                </tr>
              ))}
            </tbody>
          </table>
          <button
            onClick={() => setShowSpecModal(true)}
            className="w-full mt-4 bg-gray-100 py-2 rounded hover:bg-gray-200 text-center text-sm text-red-600"
          >
            Xem chi ti·∫øt c·∫•u h√¨nh
          </button>
        </div>
        {showSpecModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white max-w-2xl w-full rounded-lg shadow-lg overflow-y-auto max-h-[80vh]">
              {/* Header */}
              <div className="flex justify-between items-center px-4 py-3 border-b sticky top-0 bg-white z-10">
                <h2 className="text-base font-semibold">
                  Th√¥ng s·ªë k·ªπ thu·∫≠t chi ti·∫øt
                </h2>
                <button
                  className="text-xl font-bold text-gray-600 hover:text-red-600"
                  onClick={() => setShowSpecModal(false)}
                >
                  √ó
                </button>
              </div>

              {/* N·ªôi dung kh√¥ng chia khung, ch·ªâ n·ªÅn xem k·∫Ω */}
              <div className="text-sm text-gray-800 space-y-6 p-4">
                {[
                  {
                    title: "M√†n h√¨nh",
                    data: [
                      ["K√≠ch th∆∞·ªõc m√†n h√¨nh", "6.9 inches"],
                      ["C√¥ng ngh·ªá m√†n h√¨nh", "Super Retina XDR OLED"],
                      ["ƒê·ªô ph√¢n gi·∫£i", "2868 x 1320 pixels"],
                      ["T·∫ßn s·ªë qu√©t", "120Hz"],
                      [
                        "T√≠nh nƒÉng",
                        "Dynamic Island, HDR, True Tone, ProMotion 120Hz",
                      ],
                    ],
                  },
                  {
                    title: "Camera sau",
                    data: [
                      ["Th√¥ng s·ªë", "48MP + 12MP Tele + 12MP Si√™u r·ªông"],
                      ["Quay video", "4K@24/60fps, 1080p@120fps"],
                      ["T√≠nh nƒÉng", "Night mode, Deep Fusion, HDR 5"],
                    ],
                  },
                  {
                    title: "Camera tr∆∞·ªõc",
                    data: [
                      ["ƒê·ªô ph√¢n gi·∫£i", "12MP, f/1.9"],
                      ["Quay video", "4K@60fps, 1080p@60fps"],
                    ],
                  },
                  {
                    title: "Hi·ªáu nƒÉng",
                    data: [
                      ["Chipset", "Apple A18 Pro"],
                      ["GPU", "6 l√µi"],
                      ["CPU", "6 l√µi (2 hi·ªáu nƒÉng + 4 ti·∫øt ki·ªám)"],
                    ],
                  },
                  {
                    title: "B·ªô nh·ªõ",
                    data: [
                      ["RAM", "12GB"],
                      ["B·ªô nh·ªõ trong", "256GB"],
                    ],
                  },
                  {
                    title: "K·∫øt n·ªëi & Giao ti·∫øp",
                    data: [
                      ["SIM", "2 SIM (nano + eSIM)"],
                      ["Wi-Fi", "Wi-Fi 7"],
                      ["Bluetooth", "5.3"],
                      ["GPS", "GPS, GLONASS, Galileo, BeiDou, NavIC"],
                      ["NFC", "C√≥"],
                    ],
                  },
                  {
                    title: "Pin & S·∫°c",
                    data: [
                      ["C√¥ng ngh·ªá s·∫°c", "MagSafe 25W, Qi2 15W"],
                      ["C·ªïng s·∫°c", "USB Type-C"],
                    ],
                  },
                  {
                    title: "Thi·∫øt k·∫ø",
                    data: [
                      ["Ch·∫•t li·ªáu", "M·∫∑t l∆∞ng k√≠nh, vi·ªÅn Titanium"],
                      ["K√≠ch th∆∞·ªõc", "163 x 77.6 x 8.25 mm"],
                      ["Tr·ªçng l∆∞·ª£ng", "227g"],
                      ["Chu·∫©n kh√°ng n∆∞·ªõc", "IP68"],
                    ],
                  },
                  {
                    title: "T√≠nh nƒÉng kh√°c",
                    data: [
                      ["B·∫£o m·∫≠t", "Face ID"],
                      ["T√≠nh nƒÉng ƒë·∫∑c bi·ªát", "5G, SOS, Apple Pay, AI Phone"],
                      ["√Çm thanh", "Dolby Atmos, FLAC, MP3..."],
                    ],
                  },
                  {
                    title: "Th√¥ng tin kh√°c",
                    data: [
                      ["H·ªá ƒëi·ªÅu h√†nh", "iOS 18"],
                      ["Th·ªùi ƒëi·ªÉm ra m·∫Øt", "09/2024"],
                    ],
                  },
                ].map((section, idx) => (
                  <div key={idx}>
                    <h3 className="font-semibold text-gray-700 mb-2">
                      {section.title}
                    </h3>
                    <div className="rounded overflow-hidden">
                      {section.data.map(([label, value], i) => (
                        <div
                          key={i}
                          className={`flex justify-between items-start gap-3 px-3 py-2 ${
                            i % 2 === 0 ? "bg-gray-50" : "bg-white"
                          }`}
                        >
                          <span className="text-gray-600 w-1/2">{label}</span>
                          <span className="text-right w-1/2">{value}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* H·ªèi v√† ƒë√°p - n·∫±m b√™n tr√°i, kh√¥ng ƒë·ª•ng b√™n ph·∫£i */}
        <div className="bg-white p-6 rounded border shadow-sm text-sm col-span-full md:col-span-1">
          <h2 className="text-base font-bold mb-4">H·ªèi v√† ƒë√°p</h2>
ddddd
          {/* C√¢u h·ªèi nh·∫≠p */}
          <textarea
            className="w-full border rounded p-2 text-sm mb-2 resize-none"
            rows={3}
            placeholder="M·ªùi b·∫°n nh·∫≠p c√¢u h·ªèi..."
          />
          <button className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
            G·ª≠i
          </button>

          {/* Danh s√°ch h·ªèi ƒë√°p */}
          <div className="space-y-4 mt-6">
            {visibleQuestions.map((qna, i) => (
              <div key={i} className="bg-white border rounded p-4 shadow-sm">
                <p className="font-semibold text-gray-800">{qna.user}</p>
                <p className="text-xs text-gray-500 mb-2">{qna.time}</p>
                <p className="mb-2 text-gray-700">{qna.question}</p>

                {qna.adminReply && (
                  <div className="bg-gray-100 border-l-4 border-red-600 shadow-md p-4 rounded-lg text-gray-800 text-sm mt-2">
                    <p className="font-semibold mb-1 text-red-600">
                      Qu·∫£n Tr·ªã Vi√™n tr·∫£ l·ªùi:
                    </p>
                    <p>{qna.adminReply}</p>
                  </div>
                )}
              </div>
            ))}

            {/* N√∫t Xem th√™m / Thu g·ªçn */}
            {questions.length > 2 && (
              <div className="flex justify-center mt-4">
                <button
                  onClick={() => setShowAll(!showAll)}
                  className="flex items-center justify-center gap-1 text-xs text-gray-800 bg-white 
             border border-gray-300 rounded-full px-5 py-3 shadow-sm 
             transition-colors duration-200 ease-in-out 
             hover:text-red-600 hover:border-red-300 hover:bg-red-50"
                >
                  <span>
                    {showAll
                      ? "Thu g·ªçn b√¨nh lu·∫≠n"
                      : `Xem th√™m ${questions.length - 2} b√¨nh lu·∫≠n`}
                  </span>
                  <svg
                    className={`w-3 h-3 transition-transform ${
                      showAll ? "rotate-180" : ""
                    }`}
                    fill="none"
                    stroke="currentColor"
                    strokeWidth={2}
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
