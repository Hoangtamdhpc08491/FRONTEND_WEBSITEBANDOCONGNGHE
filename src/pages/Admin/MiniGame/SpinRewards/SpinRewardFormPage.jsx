import React, { useState, useEffect } from 'react';
import {
    Box,
    Button,
    TextField,
    Typography,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Switch,
    FormControlLabel,
    Paper
} from '@mui/material';
import { useNavigate, useParams } from 'react-router-dom';
import { toast } from 'react-toastify';
import { spinRewardService } from '@/services/admin/spinRewardService';
import { couponService } from '@/services/admin/couponService';
import LoaderAdmin from '@/components/common/Loader';

const SpinRewardFormPage = () => {
    const navigate = useNavigate();
    const { id } = useParams();
    const isEditing = !!id;

    const [formData, setFormData] = useState({
        name: '',
        couponId: '',
        probability: 10,
        isActive: true
    });

    const [couponList, setCouponList] = useState([]);
    const [loading, setLoading] = useState(false);
    const [errors, setErrors] = useState({});
    const [totalProbability, setTotalProbability] = useState(0);

    // üîπ L·∫•y danh s√°ch coupon (l·ªçc tr√™n FE ƒë·ªÉ b·ªè h·∫øt h·∫°n / h·∫øt l∆∞·ª£t)
    useEffect(() => {
        const fetchCoupons = async () => {
            try {
                const res = await couponService.list({ limit: 1000 });
                let list = Array.isArray(res.data?.data) ? res.data.data : [];
                const now = new Date();

                // ch·ªâ gi·ªØ coupon c√≤n h·∫°n, c√≤n l∆∞·ª£t v√† ƒëang ho·∫°t ƒë·ªông
                list = list.filter(c =>
                    c.isActive &&
                    (!c.startTime || new Date(c.startTime) <= now) &&
                    (!c.endTime || new Date(c.endTime) > now) &&
                    (c.totalQuantity > c.usedCount)
                );

                setCouponList(list);
            } catch (err) {
                toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√£ gi·∫£m gi√°');
            }
        };
        fetchCoupons();
    }, []);


    // üîπ N·∫øu edit th√¨ load reward + t·ªïng probability
    useEffect(() => {
        const fetchData = async () => {
            try {
                const res = await spinRewardService.getAll({ limit: 1000 });
                const rewards = Array.isArray(res.data) ? res.data : [];
                let sum = rewards.reduce((acc, r) => acc + (r.probability || 0), 0);

                if (isEditing) {
                    setLoading(true);
                    const resReward = await spinRewardService.getById(id);
                    setFormData({
                        name: resReward.data?.name || '',
                        couponId: resReward.data?.couponId || '',
                        probability: (resReward.data?.probability || 0) * 100,
                        isActive: resReward.data?.isActive ?? true
                    });
                    // tr·ª´ probability c≈© ƒë·ªÉ c√≤n ch·ªó nh·∫≠p m·ªõi
                    sum -= resReward.data?.probability || 0;
                    setLoading(false);
                }

                setTotalProbability(Math.round(sum * 100));

            } catch (err) {
                toast.error('Kh√¥ng th·ªÉ t·∫£i ph·∫ßn th∆∞·ªüng');
                if (isEditing) navigate('/admin/spin-rewards');
            }
        };
        fetchData();
    }, [id, isEditing, navigate]);

    // üîπ handle change input
    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
        setErrors((prev) => ({ ...prev, [name]: undefined }));
    };

    // üîπ validate form
    const validate = () => {
        const temp = {};
        if (!formData.name?.trim()) temp.name = 'Nh·∫≠p t√™n ph·∫ßn th∆∞·ªüng';
        if (!formData.couponId && !isEditing) temp.couponId = 'Ch·ªçn m√£ gi·∫£m gi√°';

        const prob = parseFloat(formData.probability);
        if (isNaN(prob) || prob < 0 || prob > 100) {
            temp.probability = 'T·ª∑ l·ªá ph·∫£i t·ª´ 0 ƒë·∫øn 100';
        } else if (totalProbability + prob > 100) {
            temp.probability = `T·ªïng t·ªâ l·ªá hi·ªán t·∫°i l√† ${totalProbability}%. Th√™m ${prob}% s·∫Ω v∆∞·ª£t qu√° 100%.`;
        }

        setErrors(temp);
        return Object.keys(temp).length === 0;
    };

    // üîπ submit
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!validate()) return;

        setLoading(true);
        try {
            const payload = {
                name: formData.name,
                couponId: formData.couponId,
                probability: parseFloat(formData.probability) / 100,
                isActive: formData.isActive
            };

            if (isEditing) {
                await spinRewardService.update(id, payload);
                toast.success('C·∫≠p nh·∫≠t th√†nh c√¥ng');
            } else {
                await spinRewardService.create(payload);
                toast.success('T·∫°o m·ªõi th√†nh c√¥ng');
            }

            navigate('/admin/spin-rewards');
        } catch (err) {
            toast.error(err?.response?.data?.message || 'L·ªói x·ª≠ l√Ω ph·∫ßn th∆∞·ªüng');
        } finally {
            setLoading(false);
        }
    };

    return (
        <Box sx={{ p: 2 }}>
            {loading && <LoaderAdmin fullscreen />}
            <Typography variant="h6" fontWeight={600} mb={2}>
                {isEditing ? 'Ch·ªânh S·ª≠a Ph·∫ßn Th∆∞·ªüng' : 'T·∫°o M·ªõi Ph·∫ßn Th∆∞·ªüng'}
            </Typography>

            <Paper sx={{ p: 3 }}>
                <form onSubmit={handleSubmit}>
                    <TextField
                        label="T√™n ph·∫ßn th∆∞·ªüng"
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        fullWidth
                        margin="normal"
                        error={!!errors.name}
                        helperText={errors.name}
                    />

                    {!isEditing && (
                        <FormControl fullWidth margin="normal" error={!!errors.couponId}>
                            <InputLabel>M√£ Gi·∫£m Gi√°</InputLabel>
                            <Select
                                name="couponId"
                                value={formData.couponId}
                                label="M√£ Gi·∫£m Gi√°"
                                onChange={handleChange}
                            >
                                {couponList.map((item) => (
                                    <MenuItem key={item.id} value={item.id}>
                                        {item.title} ({item.code})
                                    </MenuItem>
                                ))}
                            </Select>
                            {errors.couponId && (
                                <Typography color="error" variant="caption">
                                    {errors.couponId}
                                </Typography>
                            )}
                        </FormControl>
                    )}

                    <TextField
                        label="T·ª∑ l·ªá xu·∫•t hi·ªán (%)"
                        name="probability"
                        type="number"
                        value={formData.probability}
                        onChange={handleChange}
                        fullWidth
                        margin="normal"
                        error={!!errors.probability}
                        helperText={errors.probability}
                        inputProps={{ min: 0, max: 100, step: 1 }}
                    />

                    <Typography variant="body2" sx={{ mt: 1 }}>
                        T·ªïng hi·ªán t·∫°i (kh√¥ng t√≠nh reward n√†y): <b>{totalProbability}%</b>
                    </Typography>

                    <FormControlLabel
                        control={
                            <Switch
                                checked={formData.isActive}
                                onChange={handleChange}
                                name="isActive"
                                color="primary"
                            />
                        }
                        label="Hi·ªÉn th·ªã"
                        sx={{ mt: 2, mb: 2 }}
                    />

                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
                        <Button variant="outlined" onClick={() => navigate('/admin/spin-rewards')}>
                            H·ªßy
                        </Button>
                        <Button type="submit" variant="contained">
                            {isEditing ? 'C·∫≠p Nh·∫≠t' : 'T·∫°o M·ªõi'}
                        </Button>
                    </Box>
                </form>
            </Paper>
        </Box>
    );
};

export default SpinRewardFormPage;
